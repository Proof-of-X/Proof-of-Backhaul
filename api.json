{
  "openapi": "3.0.2",
  "info": {
    "title": "Proof of X",
    "version": "1.0"
  },
  "paths": {
    "/proof/v1/{proof_type}/pre-login": {
      "post": {
        "tags": [
          "Session"
        ],
        "description": "-----\n\n\tThis API is to be called before logging in.\n\n\tIt will return a 'message' that has to be signed and sent to '/login' API.\n\n\tThis will also create a cookie;\n\n\thence the '/login' API must be called in a session.",
        "operationId": "pre_login",
        "parameters": [
          {
            "name": "proof_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreloginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Set-Cookie": {
                "description": "-----\n\t\tThe cookies that are to be sent to '/login' API",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreloginResponse"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/proof/v1/{proof_type}/login": {
      "post": {
        "tags": [
          "Session"
        ],
        "description": "-----\n\n\tThis API logs in the user.\n\n\tThe user should send the 'message' that was received during the '/pre-login';\n\n\tand must sign the 'message' using privateKey.\n\n\tAnd send it in the 'signature' field.",
        "operationId": "login",
        "parameters": [
          {
            "name": "proof_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "-----\n\tThe cookies that were received after calling '/pre-login' API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Set-Cookie": {
                "description": "-----\n\tthe cookie after successful login.\n\tit must be presented for next api calls.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          },
          "401": {
            "description": "401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          },
          "402": {
            "description": "402 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/proof/v1/{proof_type}/user-info": {
      "post": {
        "tags": [
          "User Information"
        ],
        "description": "-----\n\n\tGet logged in user information.",
        "operationId": "user_info",
        "parameters": [
          {
            "name": "proof_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "-----\n\tThe cookies that were received after calling '/login' API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/proof/v1/{proof_type}/logout": {
      "post": {
        "tags": [
          "Session"
        ],
        "description": "-----\n\n\tLogs out the user.",
        "operationId": "logout",
        "parameters": [
          {
            "name": "proof_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/proof/v1/{proof_type}/prover": {
      "post": {
        "tags": [
          "Prover Information"
        ],
        "description": "-----\n\n\tGet information about a prover.",
        "operationId": "prover",
        "parameters": [
          {
            "name": "proof_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "-----\n\tThe cookies that were received after calling '/login' API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProverRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProverResponse"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          },
          "401": {
            "description": "401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/proof/v1/{proof_type}/provers": {
      "post": {
        "tags": [
          "Prover Information"
        ],
        "description": "-----\n\tGet all provers info.",
        "operationId": "provers",
        "parameters": [
          {
            "name": "proof_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "-----\n\tThe cookies that were received after calling '/login' API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProversRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProversResponse"
                }
              }
            }
          },
          "401": {
            "description": "401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/proof/v1/{proof_type}/challenger": {
      "post": {
        "tags": [
          "Challenger Information"
        ],
        "description": "-----\n\n\tGet information about a challenger.",
        "operationId": "challenger",
        "parameters": [
          {
            "name": "proof_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "-----\n\tThe cookies that were received after calling '/login' API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChallengerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengerResponse"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          },
          "401": {
            "description": "401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/proof/v1/{proof_type}/challengers": {
      "post": {
        "tags": [
          "Challenger Information"
        ],
        "description": "-----\n\tGet all challengers info.",
        "operationId": "challengers",
        "parameters": [
          {
            "name": "proof_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "-----\n\tThe cookies that were received after calling '/login' API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChallengersRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengersResponse"
                }
              }
            }
          },
          "401": {
            "description": "401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/proof/v1/{proof_type}/challenge-request-dcl": {
      "post": {
        "tags": [
          "DCL Challenge"
        ],
        "description": "-----\n\n\tRequest to create a new challenge using DCL contracts.\n\n\tBefore calling this api 'submitRequest()' smart contract must be called.\n\n\tAnd the 'challenge_id' after calling the 'submitRequest' must be provided.",
        "operationId": "challenge_request_dcl",
        "parameters": [
          {
            "name": "proof_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "-----\n\tThe cookies that were received after calling '/login' API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DCLChallengeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengeStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          },
          "401": {
            "description": "401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/proof/v1/{proof_type}/challenge-status-dcl": {
      "post": {
        "tags": [
          "DCL Challenge"
        ],
        "description": "-----\n\tGet the status of a given DCL challenge; along with results if any.",
        "operationId": "challenge_status_dcl",
        "parameters": [
          {
            "name": "proof_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "-----\n\tThe cookies that were received after calling '/login' API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DCLChallengeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseChallengeResult"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          },
          "401": {
            "description": "401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/proof/v1/{proof_type}/challenge-request": {
      "post": {
        "tags": [
          "Challenge"
        ],
        "description": "-----\n\n\tRequest to create a new challenge.\n\n\tBefore calling this api 'startChallenge()' smart contract must be called.\n\n\tAnd the 'transaction' after calling the 'startChallenge' must be provided.",
        "operationId": "challenge_request",
        "parameters": [
          {
            "name": "proof_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "-----\n\tThe cookies that were received after calling '/login' API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChallengeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengeStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          },
          "401": {
            "description": "401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/proof/v1/{proof_type}/challenge-status": {
      "post": {
        "tags": [
          "Challenge"
        ],
        "description": "-----\n\tGet the status of a given challenge; along with results if any.",
        "operationId": "challenge_status",
        "parameters": [
          {
            "name": "proof_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "-----\n\tThe cookies that were received after calling '/login' API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChallengeStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseChallengeResult"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          },
          "401": {
            "description": "401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/proof/v1/{proof_type}/challenge-result": {
      "post": {
        "tags": [
          "Challenge"
        ],
        "description": "-----\n\tPost the results of a challenge.",
        "operationId": "challenge_result",
        "parameters": [
          {
            "name": "proof_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "-----\n\tThe cookies that were received after calling '/login' API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChallengeResultRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          },
          "401": {
            "description": "401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/proof/v1/{proof_type}/challenges": {
      "post": {
        "tags": [
          "Challenge"
        ],
        "description": "-----\n\n\tHistory of challenges of the logged in user",
        "operationId": "challenges",
        "parameters": [
          {
            "name": "proof_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "-----\n\tThe cookies that were received after calling '/login' API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengesResponse"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          },
          "401": {
            "description": "401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/proof/v1/{proof_type}/claims": {
      "post": {
        "tags": [
          "Claims"
        ],
        "description": "-----\n\tUpdate a 'user's proof-specific claims",
        "operationId": "claims",
        "parameters": [
          {
            "name": "proof_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "-----\n\tThe cookies that were received after calling '/login' API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Claims"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          },
          "401": {
            "description": "401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/proof/v1/{proof_type}/claim-public-ip": {
      "post": {
        "tags": [
          "Claims"
        ],
        "description": "-----\n\tClaim that a prover/challenger has public-IP",
        "operationId": "claim_public_ip",
        "parameters": [
          {
            "name": "proof_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "-----\n\tThe cookies that were received after calling '/login' API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimPublicIP"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          },
          "401": {
            "description": "401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/proof/v1/{proof_type}/ws": {
      "get": {
        "tags": [
          "Websocket for Heartbeat and Notifications"
        ],
        "description": "-----\n\tA websocket connection for:\n\n\t\t1. Sending heartbeat (websocket ping).\n\t\t2. Receiving notification regarding challenges.",
        "operationId": "heartbeat",
        "parameters": [
          {
            "name": "proof_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "-----\n\tThe cookies that were received after calling '/login' API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "101": {
            "description": "-----\n\n\tThis opens up a websocket connection.\n\n\tThis response is the successful response.",
            "headers": {
              "Upgrade": {
                "required": true,
                "schema": {
                  "type": "string",
                  "enum": [
                    "websocket"
                  ]
                }
              },
              "Connection": {
                "required": true,
                "schema": {
                  "type": "string",
                  "enum": [
                    "Upgrade"
                  ]
                }
              }
            }
          },
          "201": {
            "description": "-----\n\n\tThis message is sent to a 'prover' through websocket when a challenge\n\n\thas been scheduled\n\n\t// ignore the status code '201' given here.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengeInfoForProver"
                }
              }
            }
          },
          "202": {
            "description": "-----\n\n\tThis message is sent to a 'challenger' through websocket when a challenge\n\n\thas been scheduled\n\n\t// ignore the status code '202' given here.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengeInfoForChallenger"
                }
              }
            }
          },
          "401": {
            "description": "401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/proof/v1/{proof_type}/ip-info": {
      "post": {
        "tags": [
          "User Information"
        ],
        "description": "-----\n\n\tGet user's IP addresses as seen by the challenge co-ordinator",
        "operationId": "ip_info",
        "parameters": [
          {
            "name": "proof_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "-----\n\tThe cookies that were received after calling '/login' API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/proof/v1/{proof_type}/statistics": {
      "post": {
        "tags": [
          "Statistics"
        ],
        "operationId": "statistics",
        "parameters": [
          {
            "name": "proof_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "-----\n\tThe cookies that were received after calling '/login' API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatisticsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/proof/v1/{proof_type}/prover-metrics": {
      "post": {
        "tags": [
          "Statistics"
        ],
        "description": "-----\n\tLogin and Ping metrics of a prover",
        "operationId": "prover_metrics",
        "parameters": [
          {
            "name": "proof_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "-----\n\tThe cookies that were received after calling '/login' API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/proof/v1/{proof_type}/challenger-metrics": {
      "post": {
        "tags": [
          "Statistics"
        ],
        "description": "-----\n\tLogin and Ping metrics of a challenger",
        "operationId": "challenger_metrics",
        "parameters": [
          {
            "name": "proof_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "-----\n\tThe cookies that were received after calling '/login' API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "WalletPublicKey": {
        "type": "object",
        "properties": {
          "solana": {
            "type": "string",
            "description": "-----\n\tThe 'solana' wallet public key"
          },
          "ethereum": {
            "type": "string",
            "description": "-----\n\tThe 'ethereum' wallet public key"
          }
        },
        "required": [
          "solana",
          "ethereum"
        ]
      },
      "PreloginRequest": {
        "type": "object",
        "properties": {
          "publicKey": {
            "type": "string",
            "description": "-----\n\tThe key used for login\n\tNOTE: when using 'ethereum' the 'publicKey = Address'"
          },
          "walletPublicKey": {
            "$ref": "#/components/schemas/WalletPublicKey"
          },
          "keyType": {
            "type": "string",
            "enum": [
              "ethereum",
              "solana"
            ],
            "description": "-----\n\tThe key-type of publicKey.\n\n\tAs of now these are supported keyTypes:\n\t\t1. solana\n\t\t2. ethereum"
          },
          "role": {
            "type": "string",
            "enum": [
              "prover",
              "challenger",
              "payer"
            ],
            "description": "-----\n \tThe role the user intends to play after login:\n\n\t\t1. prover\n\t\t\tUser who wants to prove what it offers to the network.\n\n\t\t\tExample: 'bandwidth', 'latency', 'disk', 'cpu' etc.\n\n\t\t2. challenger\n\t\t\tUser who wants to challenge a 'prover'\n\t\t\tand earn rewards.\n\n\t\t3. payer\n\t\t\tAn abstract entity/user who pays\n\t\t\tand requests for a challenge.\n\n\t\t\tA payer could be:\n\t\t\tthe 'prover' itself, other users, or the blockchain."
          },
          "projectName": {
            "type": "string",
            "description": "-----\n\tIf the user is also part of another blockchain project/app,\n\n\tthen the project-name/app-name can be provided here.\n\n\t\te.g. \"filecoin\", \"filecoin-station\", \"oort\", etc."
          },
          "projectPublicKey": {
            "type": "string",
            "description": "-----\n\tpublicKey of the user associated with the\n\n\t'projectName' blockchain project/app."
          },
          "claims": {
            "type": "object",
            "properties": {
              "{claim-parameter-1}": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "number",
                    "format": "float"
                  }
                ]
              },
              "{claim-parameter-2}": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "number",
                    "format": "float"
                  }
                ]
              },
              "{claim-parameter-3}": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "number",
                    "format": "float"
                  }
                ]
              },
              "{claim-parameter-N}": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "number",
                    "format": "float"
                  }
                ]
              }
            },
            "required": [
              "{claim-parameter-1}",
              "{claim-parameter-2}",
              "{claim-parameter-3}",
              "{claim-parameter-N}"
            ],
            "description": "-----\n\tAll claims.\n\tclaims is dependent on proof_type,\n\n\tExample:\n\t\tFor pob it is:\n\t\t{\n\t\t\tuplink_bandwidth\t: Float; // The upload bandwidth in Mbps\n\t\t\tdownlink_bandwidth\t: Float; // The downlink bandwidth in Mbps\n\t\t}\n\n\t\tfor pol it is:\n\t\t{\n\t\t\tcountry\t\t: String;\t// The 2 letter country code : e.g. US\n\t\t\tcity\t\t: String;\t// e.g. Austin \n\t\t\tregion\t\t: String;\t// e.g. Texas\n\n\t\t\tlatitude\t: Float,\n\t\t\tlongitude\t: Float,\n\t\t\tradius\t\t: Float,\t// in KMs - with latitude, longitude as the center\n\t\t}"
          }
        },
        "required": [
          "publicKey",
          "keyType",
          "role",
          "claims"
        ]
      },
      "PreloginResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "-----\n\tA string to be signed using user's 'privateKey' to create a 'signature'.\n\n\tThis 'signature' should be later sent in the '/login' API to login."
              }
            },
            "required": [
              "message"
            ]
          }
        },
        "required": [
          "result"
        ]
      },
      "FailureResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              }
            },
            "required": [
              "message"
            ],
            "description": "-----\n\tThe 'error.message' contains the reason for the failure."
          }
        },
        "required": [
          "error"
        ]
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "signature": {
            "type": "string",
            "description": "-----\n\tThe signature afer signing the 'message' with the 'privateKey'.\n\n\tThe signature can be created using MetaMask/Phantom wallet.\n\n\tThese signatures are generated through certain wallets/APIs.\n    \te.g.\n        \t1. Wallets in browser (Metamask / Phantom)\n\n        \t2. Dart\n            \t\t(https://pub.dev/packages/eth_sig_util)\n\n        \t3. Python\n            \t\t(https://pypi.org/project/eth-account/)\n\n\tin Python it can be created as:\n\n\t\tfrom eth_account.messages import encode_defunct\n\t\tfrom eth_account import Account\n\n\t\tmsg=\"<Message received from the pre-login response>\"\n\t\tsignature = sign(msg)\n\n\t\tdef sign(msg):\n\t\t#\n\t\t\t# Hexadecimal key (private key)\n\t\t\tkey = \"<Your-Private-Key>\"\n\n\t\t\t# Create the message hash\n\t\t\tmsghash = encode_defunct(text=msg)\n\n\t\t\t# Sign the message\n\t\t\tsignature = Account.sign_message(msghash, key)\n\t\t\treturn \"0x\" + signature.signature.hex()\n\t\t#"
          }
        },
        "required": [
          "signature"
        ]
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean"
              }
            },
            "required": [
              "success"
            ],
            "description": "-----\n\tSuccessful response always has a valid 'result'."
          }
        },
        "required": [
          "result"
        ]
      },
      "StakingResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              }
            },
            "required": [
              "message"
            ],
            "description": "-----\n\tThe failure due to requirement of 'payment' or 'staking'.\n\n\tThe 'error.message' contains the reason for the failure."
          }
        },
        "required": [
          "error"
        ]
      },
      "UserInfoResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "-----\n\n\twill return 'null' if the user has not logged in"
              },
              "publicKey": {
                "type": "string"
              },
              "keyType": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "region": {
                "type": "string"
              },
              "country": {
                "type": "string"
              }
            },
            "required": [
              "id",
              "publicKey",
              "keyType",
              "city",
              "region",
              "country"
            ]
          }
        },
        "required": [
          "result"
        ]
      },
      "ProverRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "-----\n \tThe 'id' of the prover."
          }
        },
        "required": [
          "id"
        ]
      },
      "GeoIP": {
        "type": "object",
        "properties": {
          "range": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "country": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "eu": {
            "type": "string",
            "enum": [
              "0",
              "1"
            ]
          },
          "timezone": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "ll": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          "metro": {
            "type": "integer",
            "format": "int32"
          },
          "area": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "range",
          "country",
          "region",
          "eu",
          "timezone",
          "city",
          "ll",
          "metro",
          "area"
        ]
      },
      "ResponseChallengeResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "-----\n\tThe challenge id"
          },
          "challenge_parameters": {
            "type": "object",
            "properties": {
              "number_of_challengers": {
                "type": "integer",
                "format": "int32"
              },
              "{other-challenge-parameter-1}": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "number",
                    "format": "float"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "{other-challenge-parameter-2}": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "number",
                    "format": "float"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "{other-challenge-parameter-3}": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "number",
                    "format": "float"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "{other-challenge-parameter-N}": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "number",
                    "format": "float"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              }
            },
            "required": [
              "number_of_challengers",
              "{other-challenge-parameter-1}",
              "{other-challenge-parameter-2}",
              "{other-challenge-parameter-3}",
              "{other-challenge-parameter-N}"
            ],
            "description": "-----\n\tThe parameters of this challenge\n\n\tThe other-challenge_parameters depends on proof_type.\n\n\tFor pob it is:\n\n\t\trate_of_packets_mbps\t\t: Integer, // rate at which packets will arrive from a challenger\n\t\tmax_packets_per_challenger\t\t: Integer, // max packets that a challenger can send\n\t\ttotal_num_packets_for_challenge\t: Integer  // total packets that a prover should receive"
          },
          "challenge_start_time": {
            "type": "string"
          },
          "challenge_end_time": {
            "type": "string"
          },
          "consolidated_result": {
            "type": "object",
            "properties": {
              "{consolidated-result-parameter-1}": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "number",
                    "format": "float"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "{consolidated-result-parameter-2}": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "number",
                    "format": "float"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "{consolidated-result-parameter-3}": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "number",
                    "format": "float"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "{consolidated-result-parameter-N}": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "number",
                    "format": "float"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              }
            },
            "required": [
              "{consolidated-result-parameter-1}",
              "{consolidated-result-parameter-2}",
              "{consolidated-result-parameter-3}",
              "{consolidated-result-parameter-N}"
            ],
            "description": "-----\n\tThe result collected and consolidated from the challengers\n\n\tThe consolidated-result-parameters depends on proof_type.\n\n\tFor pol it is:\n\n\t KnowLock\t: boolean,\t// (web3) if KnowLock was able to validate the location\n\t\t\"ipapi.co\"\t: boolean,\t// (web2) if ipapi.co api was able to validate the location\n\t\tipregistry\t: boolean,\t// (web2) if ipregistry api was able to validate the location\n\t\tmaxmind\t: boolean \t// (web2) if maxmind api was able to validate the location"
          },
          "prover": {
            "type": "object",
            "properties": {
              "claims": {
                "type": "object",
                "properties": {
                  "{claim-parameter-1}": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer",
                        "format": "int32"
                      },
                      {
                        "type": "number",
                        "format": "float"
                      }
                    ]
                  },
                  "{claim-parameter-2}": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer",
                        "format": "int32"
                      },
                      {
                        "type": "number",
                        "format": "float"
                      }
                    ]
                  },
                  "{claim-parameter-N}": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer",
                        "format": "int32"
                      },
                      {
                        "type": "number",
                        "format": "float"
                      }
                    ]
                  }
                },
                "required": [
                  "{claim-parameter-1}",
                  "{claim-parameter-2}",
                  "{claim-parameter-N}"
                ]
              }
            },
            "required": [
              "claims"
            ],
            "description": "-----\n\tProver details"
          },
          "state": {
            "type": "string",
            "enum": [
              "SUBMITTED_TO_CHALLENGE_COORDINATOR",
              "ACCEPTED_BY_CHALLENGE_COORDINATOR",
              "ERROR_NOT_ENOUGH_CHALLENGERS",
              "ENDED_WITH_PARTIAL_SUCCESS",
              "ERROR_ENDED_WITH_FAILURE",
              "ENDED_SUCCESSFULLY"
            ],
            "description": "-----\n\tThe current state of the challenge"
          }
        },
        "required": [
          "id",
          "challenge_parameters",
          "challenge_start_time",
          "challenge_end_time",
          "consolidated_result",
          "prover",
          "state"
        ]
      },
      "ProverDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "-----\n\tThe unique 'id' of the prover."
          },
          "name": {
            "type": "string",
            "description": "-----\n\tThe nickname of this prover"
          },
          "geoip": {
            "$ref": "#/components/schemas/GeoIP"
          },
          "claims": {
            "type": "object",
            "properties": {
              "{claim-parameter-1}": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "number",
                    "format": "float"
                  }
                ]
              },
              "{claim-parameter-2}": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "number",
                    "format": "float"
                  }
                ]
              },
              "{claim-parameter-3}": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "number",
                    "format": "float"
                  }
                ]
              },
              "{claim-parameter-N}": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "number",
                    "format": "float"
                  }
                ]
              }
            },
            "required": [
              "{claim-parameter-1}",
              "{claim-parameter-2}",
              "{claim-parameter-3}",
              "{claim-parameter-N}"
            ],
            "description": "-----\n\tMap of current claims"
          },
          "last_alive": {
            "type": "string",
            "format": "date-time",
            "description": "-----\n\tThe latest time when the API server received a handshake from the prover."
          },
          "last_ip_changed": {
            "type": "string",
            "format": "date-time",
            "description": "-----\n\tThe last time when the prover changed its IP"
          },
          "keyType": {
            "type": "string",
            "enum": [
              "ethereum"
            ]
          },
          "publicKey": {
            "type": "string"
          },
          "projectName": {
            "type": "string"
          },
          "projectPublicKey": {
            "type": "string"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseChallengeResult"
            },
            "description": "-----\n\tThe challenge results of the prover"
          }
        },
        "required": [
          "id",
          "name",
          "geoip",
          "claims",
          "last_alive",
          "last_ip_changed",
          "keyType",
          "publicKey",
          "projectName",
          "projectPublicKey",
          "results"
        ]
      },
      "ProverResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ProverDetails"
          }
        },
        "required": [
          "result"
        ]
      },
      "ProversRequest": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "integer",
            "format": "int32",
            "description": "-----\n\tthe number of provers you wish to skip (default 0)"
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "-----\n\tthe MAX number of provers you wish to get (default 50)"
          }
        }
      },
      "ProversResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "provers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProverDetails"
                }
              }
            },
            "required": [
              "provers"
            ]
          }
        },
        "required": [
          "result"
        ]
      },
      "ChallengerRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "-----\n \tThe 'id' of the challenger."
          }
        },
        "required": [
          "id"
        ]
      },
      "ChallengerDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "-----\n\tThe unique 'id' of the challenger."
          },
          "geoip": {
            "$ref": "#/components/schemas/GeoIP"
          },
          "claims": {
            "type": "object",
            "properties": {
              "{claim-parameter-1}": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "number",
                    "format": "float"
                  }
                ]
              },
              "{claim-parameter-2}": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "number",
                    "format": "float"
                  }
                ]
              },
              "{claim-parameter-N}": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "number",
                    "format": "float"
                  }
                ]
              }
            },
            "required": [
              "{claim-parameter-1}",
              "{claim-parameter-2}",
              "{claim-parameter-N}"
            ],
            "description": "-----\n\tMap of claims"
          },
          "last_alive": {
            "type": "string",
            "format": "date-time",
            "description": "-----\n\tThe latest time when the API server received a handshake from the prover."
          }
        },
        "required": [
          "id",
          "geoip",
          "claims",
          "last_alive"
        ]
      },
      "ChallengerResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ChallengerDetails"
          }
        },
        "required": [
          "result"
        ]
      },
      "ChallengersRequest": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "integer",
            "format": "int32",
            "description": "-----\n\tthe number of challengers you wish to skip (default 0)"
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "-----\n\tthe MAX number of challengers you wish to get (default 50)"
          }
        }
      },
      "ChallengersResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "challengers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChallengerDetails"
                }
              }
            },
            "required": [
              "challengers"
            ]
          }
        },
        "required": [
          "result"
        ]
      },
      "DCLChallengeRequest": {
        "type": "object",
        "properties": {
          "challenge_id": {
            "type": "string",
            "description": "-----\n \tThe challenge_id that was generated after calling the\n\tDCL 'submitRequest' smart contract."
          }
        },
        "required": [
          "challenge_id"
        ]
      },
      "ChallengeStatusResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "challenge_id": {
                "type": "string"
              },
              "challenge_status": {
                "type": "string",
                "enum": [
                  "SUBMITTED_TO_CHALLENGE_COORDINATOR",
                  "ACCEPTED_BY_CHALLENGE_COORDINATOR",
                  "ERROR_NOT_ENOUGH_CHALLENGERS",
                  "ENDED_WITH_PARTIAL_SUCCESS",
                  "ERROR_ENDED_WITH_FAILURE",
                  "ENDED_SUCCESSFULLY"
                ]
              }
            },
            "required": [
              "challenge_id",
              "challenge_status"
            ]
          }
        },
        "required": [
          "result"
        ]
      },
      "ChallengeRequest": {
        "type": "object",
        "properties": {
          "prover": {
            "type": "string",
            "description": "-----\n \tThe 'id' of the prover."
          },
          "transaction": {
            "type": "string",
            "description": "-----\n \tThe transaction that was generated after calling the\n\t'startChallenge' smart contract."
          }
        },
        "required": [
          "prover",
          "transaction"
        ]
      },
      "ChallengeStatusRequest": {
        "type": "object",
        "properties": {
          "transaction": {
            "type": "string",
            "description": "-----\n \tThe transaction that was generated after calling the\n\t'startChallenge' smart contract."
          }
        },
        "required": [
          "transaction"
        ]
      },
      "ChallengeResultRequest": {
        "type": "object",
        "properties": {
          "message_type": {
            "type": "string",
            "enum": [
              "challenge_result"
            ]
          },
          "message": {
            "type": "object",
            "properties": {
              "start_time": {
                "type": "string"
              },
              "end_time": {
                "type": "string"
              },
              "challenge_succeeded": {
                "type": "boolean"
              },
              "{result-parameter-1}": {
                "type": "string"
              },
              "{result-parameter-2}": {
                "type": "string"
              },
              "{result-parameter-3}": {
                "type": "string"
              },
              "{result-parameter-N}": {
                "type": "string"
              }
            },
            "required": [
              "start_time",
              "end_time",
              "challenge_succeeded",
              "{result-parameter-1}",
              "{result-parameter-2}",
              "{result-parameter-3}",
              "{result-parameter-N}"
            ],
            "description": "-----\n\tThe result of a challenge - a JSON converted to a string.\n\n\te.g. in JavaScript:\n\n\t\tmessage = JSON.stringify ({\n\t\t\tchallenge_id,\n\t\t\tresult,\n\t\t});\n\n\tThe result contains fields that have been measured\n\n\tby the challenger:\n\n\t\tlike \"bandwidth\" and \"latency\"."
          },
          "signature": {
            "type": "string",
            "description": "-----\n\tThe 'message' string signed using privateKey."
          }
        },
        "required": [
          "message_type",
          "message",
          "signature"
        ]
      },
      "ChallengeHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "challenge_start_time": {
            "type": "string"
          },
          "challenge_timeout": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "challenge_start_time",
          "challenge_timeout"
        ]
      },
      "ChallengesResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChallengeHistory"
            }
          }
        },
        "required": [
          "result"
        ]
      },
      "Claims": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "object",
            "properties": {
              "{claim-parameter-1}": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "number",
                    "format": "float"
                  }
                ]
              },
              "{claim-parameter-2}": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "number",
                    "format": "float"
                  }
                ]
              },
              "{claim-parameter-3}": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "number",
                    "format": "float"
                  }
                ]
              },
              "{claim-parameter-N}": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "number",
                    "format": "float"
                  }
                ]
              }
            },
            "required": [
              "{claim-parameter-1}",
              "{claim-parameter-2}",
              "{claim-parameter-3}",
              "{claim-parameter-N}"
            ],
            "description": "-----\n\tMap of all things a 'user' wants to claim."
          }
        },
        "required": [
          "claims"
        ]
      },
      "ClaimPublicIP": {
        "type": "object",
        "properties": {
          "IPv4": {
            "type": "boolean",
            "description": "-----\n\tClaim which one of the interfaces have public-IP"
          },
          "IPv6": {
            "type": "boolean"
          }
        }
      },
      "Challenger": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string"
          },
          "publicKey": {
            "type": "string"
          }
        },
        "required": [
          "ip",
          "publicKey"
        ]
      },
      "ChallengeInfoForProver": {
        "type": "object",
        "properties": {
          "message_type": {
            "type": "string",
            "enum": [
              "challenge_for_prover"
            ]
          },
          "message": {
            "type": "object",
            "properties": {
              "challenge_id": {
                "type": "string"
              },
              "challenge_start_time": {
                "type": "string",
                "format": "date-time"
              },
              "challenge_timeout": {
                "type": "string",
                "format": "date-time"
              },
              "challengers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Challenger"
                }
              },
              "max_packets_per_challenger": {
                "type": "integer",
                "format": "int32"
              },
              "total_num_packets_for_challenge": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "challenge_id",
              "challenge_start_time",
              "challenge_timeout",
              "challengers",
              "max_packets_per_challenger",
              "total_num_packets_for_challenge"
            ]
          },
          "signature": {
            "type": "string"
          }
        },
        "required": [
          "message_type",
          "message",
          "signature"
        ]
      },
      "Prover": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string"
          },
          "publicKey": {
            "type": "string"
          }
        },
        "required": [
          "ip",
          "publicKey"
        ]
      },
      "ChallengeInfoForChallenger": {
        "type": "object",
        "properties": {
          "message_type": {
            "type": "string",
            "enum": [
              "challenge_for_challenger"
            ]
          },
          "message": {
            "type": "object",
            "properties": {
              "challenge_id": {
                "type": "string"
              },
              "prover": {
                "$ref": "#/components/schemas/Prover"
              },
              "challenge_start_time": {
                "type": "string",
                "format": "date-time"
              },
              "challenge_timeout": {
                "type": "string",
                "format": "date-time"
              },
              "num_packets": {
                "type": "integer",
                "format": "int32"
              },
              "rate_of_packets_mbps": {
                "type": "number",
                "format": "float"
              },
              "total_num_packets_for_challenge": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "challenge_id",
              "prover",
              "challenge_start_time",
              "challenge_timeout",
              "num_packets",
              "rate_of_packets_mbps",
              "total_num_packets_for_challenge"
            ]
          },
          "signature": {
            "type": "string"
          }
        },
        "required": [
          "message_type",
          "message",
          "signature"
        ]
      },
      "IPInfoResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "IPv4": {
                "type": "string",
                "nullable": true,
                "description": "-----\n\n\twill return 'null' if the specific IP version is not available"
              },
              "IPv6": {
                "type": "string",
                "nullable": true
              }
            },
            "required": [
              "IPv4",
              "IPv6"
            ]
          }
        },
        "required": [
          "result"
        ]
      },
      "StatisticsResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "online_provers": {
                "type": "integer",
                "format": "int32",
                "description": "-----\n\t'online_provers' are the number of provers currently online.\n\t'num_provers'    are the total number of provers registered."
              },
              "num_provers": {
                "type": "integer",
                "format": "int32"
              },
              "online_challenges": {
                "type": "integer",
                "format": "int32",
                "description": "-----\n\t'online_challenges' are the number of challengers currently online.\n\t'num_challengers'   are the total number of challengers registered."
              },
              "num_challengers": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "online_provers",
              "num_provers",
              "online_challenges",
              "num_challengers"
            ]
          }
        },
        "required": [
          "result"
        ]
      },
      "MetricsRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "MetricsResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "number_of_pings": {
                "type": "object",
                "properties": {
                  "{date-1}": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "{date-2}": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "{date-3}": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "{date-N}": {
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "required": [
                  "{date-1}",
                  "{date-2}",
                  "{date-3}",
                  "{date-N}"
                ]
              },
              "number_of_logins": {
                "type": "object",
                "properties": {
                  "{date-1}": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "{date-2}": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "{date-3}": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "{date-N}": {
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "required": [
                  "{date-1}",
                  "{date-2}",
                  "{date-3}",
                  "{date-N}"
                ]
              },
              "number_of_times_ip_changed": {
                "type": "object",
                "properties": {
                  "{date-1}": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "{date-2}": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "{date-3}": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "{date-N}": {
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "required": [
                  "{date-1}",
                  "{date-2}",
                  "{date-3}",
                  "{date-N}"
                ]
              }
            },
            "required": [
              "number_of_pings",
              "number_of_logins",
              "number_of_times_ip_changed"
            ]
          }
        },
        "required": [
          "result"
        ]
      }
    },
    "securitySchemes": {
      "SecurityHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "Cookie"
      }
    }
  },
  "security": [
    {
      "SecurityHeader": []
    }
  ],
  "servers": [
    {
      "url": "https://api.witnesschain.com/"
    }
  ]
}